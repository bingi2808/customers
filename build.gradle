plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.openapi.generator" version "7.11.0"
}

group = 'com.example'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:3.4.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.2'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.4.2'

	implementation 'org.mapstruct:mapstruct:1.6.3'
	implementation 'org.mapstruct:mapstruct-processor:1.6.3'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	compileOnly 'org.projectlombok:lombok:1.18.34'
	runtimeOnly 'com.mysql:mysql-connector-j:9.2.0'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'

	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.4.2'
	testImplementation 'org.springframework.security:spring-security-test:3.4.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

openApiGenerate {
	generatorName = 'spring'
	inputSpec = "$projectDir/src/main/resources/static/customers.yaml"
	outputDir = "$projectDir/generated"
	apiPackage = 'com.example.customers.api'
	modelPackage = 'com.example.customers.model'
	configOptions = [
			dateLibrary: 'java8',
			interfaceOnly: 'true',
			useTags: 'true',
			openApiNullable: 'false'
	]
}

tasks.named('compileJava') {
	dependsOn 'openApiGenerate'
}

sourceSets {
	main {
		java {
			srcDirs "$projectDir/generated/src/main/java"
		}
	}
}